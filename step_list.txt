INSTALLAZIONE E CONFIGURAZIONE DI LARAVEL
1 - composer create-project laravel/laravel:^9.2 NOME REPO/PROGETTO (metto :^9.2 per indicare la versione di laravel da installare)
2 - Entro nella cartella con il terminale e digito code . (apro il progetto in vscode in generale)
3 - Creo la repo da qui
4 - Lancio il comando php artisan serve per creare un server virtuale nel quale girerà la mia applicazione
5 - Lanciare il comando composer require pacificdev/laravel_9_preset per installare il pacchetto
6 - Lanciare il comando php artisan preset:ui bootstrap
7 - Lanciare il comando npm i
8 - Rinominare il file vite.config.js in vite.config.mjs OPPURE aggiungere/modificare in "type": "module" nel file package.json
9 - eseguire il comando npm run dev

CREAZIONE DI UN PROGETTO A PARTIRE DA UNA REPO TEMPLATE
1 - Creo un progetto in locale (non deve avere caratteristiche di un progetto specifico!)
2 - Lo pubblico su GitHub normalmente
3 - Vado su GitHub, e nella pagina settings di questa repo, imposto che sia una repo template
4 - Vado nella pagina code e seleziono "use this template" -> create new repository
5 - Mettere i dati obbligatori e pubblica la repo, per poi crearla.
6 - Clonare la repo da VSCode in un cartella a piacimento e quindi aprire la repo appena clonata
7 - Lanciare i comandi composer install, npm i, copiare il file .env.example e rinominarlo in .env
8 - Lanciare il comando php artisan key:generate (fondamentale, perché senza l'APP_KEY l'applicazione non parte). 

Una volta creata la repo template, per creare un nuovo progetto partite dal punto 4



1. Creare un Model
Se desideri creare anche una migrazione insieme al modello, puoi usare l'opzione:
php artisan make:model NomeModello -m

2. Creare un Controller
-Se vuoi creare un controller con metodi CRUD predefiniti (index, create, store, show, edit, update, destroy), puoi usare l'opzione --resource:

php artisan make:controller NomeController --resource

in Control usare il Model use App\Models\NomeModello;

in WEB scrivere:
route::resource('pastas', NomeController::class);


3. Creare un Seeder

php artisan make:seeder NomeSeeder

4.Dopo aver creato il seeder, puoi eseguirlo con:
ESEMPIO DB IN CONFIG:
   public function run()
    {
        $characters = config('db_characters.characters');

        foreach ($characters as $character) {
            $NewCharacter = new Character();
            $NewCharacter->name = $character['name'];
            $NewCharacter->description = $character['description'];

            $NewCharacter->save();
        }
    }
ESEMPIO DATI FALSI SENZA DB IN CONFIG:
use Faker\Generator as Faker;

    public function run(Faker $faker)
    {
        for ($i = 0; $i < 20; $i++) {
            $comic = new Comic();
            $comic->title = $faker->words(3, true);
            $comic->author = $faker->firstName() . ' ' . $faker->lastName();
            $comic->description = $faker->paragraph();
            $comic->price = $faker->randomFloat(2, 0, 9999);

            $comic->save();
        }
    }

php artisan db:seed --class=NomeSeeder

Per modificare il contenuto delle colonne, vado su myadminaphp cancello il contenuto dal databse, poi faccio le modifiche che voglio sul seeder e rilancio il comando php artisan db:seed --class=TrainsTableSeeder

5.Per applicare tutte le migrazioni create, puoi eseguire:

In Migrations sezione UP realizzo le colonne della tabella
$table->string('title', 50); 
$table->year('year'); 
$table->float('vote', 2, 1);
php artisan migrate


-databaseseeder

class DatabaseSeeder extends Seeder
{
    /**
     
Seed the application's database.*/
  public function run(): void{$this->call([UsersSeeder::class,StackholdersSeeder::class,VehiclesSeeder::class,DriversSeeder::class]);}
}


-comando per buttare giù tutto e ripopolare

php artisan migrate:refresh --seed

-aggiungere alla funzione per errore Migrations
   Schema::dropIfExists('characters');